/* SBLockScreenManager.h Was Dumped By @greensnow_tweak on Saturday, 15 June 2013 at 10:00:01 PM AEST On IOS 7 Beta 1 Firmware. */
/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: (null)
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "SpringBoard-Structs.h"

@class NSString, NSMutableSet, SBPasscodeEntryAlertViewController, SBLockScreenViewControllerBase, SBPasscodeLockDisableAssertion;

__attribute__((visibility("hidden")))
@interface SBLockScreenManager : XXUnknownSuperclass {
	SBLockScreenViewControllerBase* _lockScreenViewController;
	BOOL _isUILocked;
	BOOL _appRequestedPasscodeEntry;
	BOOL _uiHasBeenLockedOnce;
	SBPasscodeEntryAlertViewController* _passcodeEntryController;
	SBPasscodeLockDisableAssertion* _disablePasscodeLockWhileUIUnlockedAssertion;
	NSMutableSet* _disableLockScreenIfPossibleAssertions;
	BOOL _isInLostMode;
	NSString* _currentTestName;
}
@property(readonly, assign) BOOL isUILocked;
@property(retain, nonatomic) NSString* currentTestName;
@property(readonly, assign, nonatomic) SBLockScreenViewControllerBase* lockScreenViewController;
+(id)sharedInstanceIfExists;
+(id)sharedInstance;
+(id)_sharedInstanceCreateIfNeeded:(BOOL)needed;
-(void)runUnlockTest:(id)test options:(id)options;
-(void)_irisOpened;
-(BOOL)handleMenuButtonTap;
-(BOOL)handleKeyHIDEvent:(IOHIDEventRef)event;
-(void)activationChanged:(id)changed;
-(BOOL)isInLostMode;
-(void)exitLostModeIfNecessaryFromRemoteRequest:(BOOL)remoteRequest;
-(void)activateLostModeForRemoteLock:(BOOL)remoteLock;
-(void)_lockFeaturesForRemoteLock:(BOOL)remoteLock;
-(void)remoteLock:(BOOL)lock;
-(void)_networkTetheringStateChanged:(id)changed;
-(void)_deviceBlockedChanged:(id)changed;
-(void)_deviceLockedChanged:(id)changed;
-(BOOL)attemptUnlockWithPasscode:(id)passcode;
-(void)startUIUnlockFromSource:(int)source withOptions:(id)options;
-(void)updateSpringBoardStatusBarForLockScreenTeardown;
-(void)cancelApplicationRequestedDeviceLockEntry;
-(void)applicationRequestedDeviceUnlock;
-(void)removeLockScreenDisableAssertion:(id)assertion;
-(void)addLockScreenDisableAssertion:(id)assertion;
-(void)_handleExternalUIUnlock:(id)unlock;
-(void)_finishUIUnlockFromSource:(int)source withOptions:(id)options;
-(void)_undimScreenForUnlockFromSource:(int)source condition:(id)condition;
-(void)unlockUIFromSource:(int)source withOptions:(id)options;
-(void)_sendUILockStateChangedNotification;
-(void)_lockUI;
-(void)_setUILocked:(BOOL)locked;
-(void)_relockUIForButtonPress:(BOOL)buttonPress afterCall:(BOOL)call;
-(void)_activateLockScreenAnimated:(BOOL)animated automatically:(BOOL)automatically disableLockSound:(BOOL)sound inScreenOffMode:(BOOL)screenOffMode;
-(void)lockUIFromSource:(int)source withOptions:(id)options;
-(BOOL)shouldLockUIAfterEndingCall;
-(BOOL)_shouldLockAfterFaceTimeCall;
-(BOOL)_shouldLockAfterTelephonyCall;
-(BOOL)hasUIEverBeenLocked;
-(id)_newLockScreenController;
-(id)init;
@end
