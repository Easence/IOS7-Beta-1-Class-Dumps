/* MapsAppDelegate.h Was Dumped By @greensnow_tweak on Sunday, 16 June 2013 at 02:49:00 PM AEST On IOS 7 Beta 1 Firmware. */
/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: (null)
 */

#import "Maps-Structs.h"
#import "UINavigationControllerDelegate.h"
#import "UIAlertViewDelegate.h"
#import "StarkDisplayControllerDelegate.h"
#import "UIApplicationDelegatePrivate.h"
#import "UIApplicationDelegate.h"
#import "MNBackgroundNavigationDelegate.h"
#import "UIApplicationTestingDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSHashTable, MapsMainModeController, NSArray, MapNavigationController, UIAlertView, UIWindow, StarkDisplayController, NSDate, LightLevelController, NSTimer, MainChromeViewController, UINavigationController, MapsDebugController, NSMutableSet, BKSProcessAssertion;

__attribute__((visibility("hidden")))
@interface MapsAppDelegate : XXUnknownSuperclass <UIApplicationTestingDelegate, StarkDisplayControllerDelegate, UIApplicationDelegate, UIApplicationDelegatePrivate, UINavigationControllerDelegate, MNBackgroundNavigationDelegate, UIAlertViewDelegate> {
	BOOL _suppressLoadingIndicator;
	int _loadingCount;
	int* _loadingCounters;
	int _idleTimerDisabledCount;
	int _idleTimerDisabledIfChargedCount;
	int _idleTimerDisabledReasonCounter[2];
	int _batteryMonitorCount;
	int _batteryMonitorReasonCounter[2];
	BOOL _registeredForAddressBookChanges;
	UIWindow* _window;
	MapNavigationController* _navControllerPhone;
	MapsMainModeController* _mapController;
	UINavigationController* _debugNavigationController;
	MapsDebugController* _mapsDebugController;
	NSDate* _lastSeenWifiAlertDate;
	UIAlertView* _wifiDisabledAlert;
	BOOL _disableWiFiAlert;
	MainChromeViewController* _chromeViewController;
	int _navNotifyToken;
	BOOL _hasNavNotifyToken;
	BOOL _isNavigating;
	BOOL _isTrackingLocation;
	SBSThermalWarningAssertionRef _thermalWarningSuppressionAssertion;
	NSHashTable* _navigatorUIObserversSet;
	unsigned _preferredTransportType;
	StarkDisplayController* _starkDisplayController;
	NSDate* _enteredForegroundDate;
	BOOL _running;
	int _postedOverrides;
	NSTimer* _navigationTimestampTimer;
	NSMutableSet* _navigatorsSuspendingIdleTimer;
	BKSProcessAssertion* _priorityAssertion;
	BOOL _debugAutomaticNightMode;
	BOOL _enteredForegroundThisRunLoopIteration;
}
@property(retain, nonatomic) UIWindow* window;
@property(retain, nonatomic) NSDate* lastSeenWifiAlertDate;
@property(retain, nonatomic) BKSProcessAssertion* priorityAssertion;
@property(readonly, assign, nonatomic) StarkDisplayController* starkDisplayController;
@property(assign, nonatomic) BOOL debugAutomaticNightMode;
@property(readonly, assign, nonatomic) unsigned preferredTransportType;
@property(readonly, assign, nonatomic) NSArray* navigatorUIObservers;
@property(readonly, assign, nonatomic) MainChromeViewController* chromeViewController;
@property(retain, nonatomic) NSDate* enteredForegroundDate;
@property(readonly, assign, nonatomic) BOOL canPlayTrace;
@property(readonly, assign, nonatomic) LightLevelController* lightLevelController;
@property(retain, nonatomic) UIWindow* window;
-(void)removeNavigatorUIObserver:(id)observer;
-(void)addNavigatorUIObserver:(id)observer;
-(id)shieldImageForType:(int)type text:(id)text size:(int)size;
-(void)endBackgroundNavigation;
-(void)startPreparedBackgroundNavigation;
-(void)prepareBackgroundNavigationWithItems:(id)items;
-(void)_updatePreferredTransport;
-(void)_updateDistanceUnits;
-(void)setMapsIsNavigating:(BOOL)navigating;
-(void)setTrackingMode:(int)mode monitorBatteryState:(BOOL)state;
-(void)setMonitorBattery:(BOOL)battery forReason:(int)reason;
-(id)monitorBatteryStateDescription;
-(void)clearDoubleHeightStatusBar;
-(void)navigationSessionWillEnd:(id)navigationSession;
-(void)navigationSessionHasArrived:(id)arrived;
-(void)navigationSessionWillResumeFromPause:(id)navigationSession;
-(void)navigationSessionWillPause:(id)navigationSession;
-(void)navigationSessionWillStart:(id)navigationSession;
-(void)_removeNavigatorSuspendingIdleTimer:(id)timer;
-(void)_addNavigatorSuspendingIdleTimer:(id)timer;
-(void)_setLaunchIntoNavigationOnRelaunch:(BOOL)relaunch;
-(void)_setLaunchIntoNavigationOnRelaunch:(BOOL)relaunch destinationPersistentData:(id)data directionsMode:(int)mode;
-(void)_updatePersistedNavigationTimestamp;
-(void)_application:(id)application statusBarTouchesEnded:(id)ended;
-(void)application:(id)application didFinishLaunchingSuspendedWithOptions:(id)options;
-(unsigned short)searchProviderID;
-(unsigned short)geocodeProviderID;
-(unsigned short)directionsProviderID;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(BOOL)locationManagerShouldPauseLocationUpdates:(id)locationManager;
-(void)locationManagerDidReset:(id)locationManager;
-(void)locationManagerFailedToUpdateLocation:(id)updateLocation withError:(id)error;
-(void)locationManagerUpdatedLocation:(id)location;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)_showWifiAlertIfNecessary;
-(void)wiFiStatusDidChange:(id)wiFiStatus;
-(void)_removeExistingWifiAlert;
-(BOOL)applicationCanPromptToCalibrateHeading:(id)calibrateHeading;
-(void*)sharedAddressBook;
-(void)_setDesiredIdleTimerState:(int)state reason:(int)reason monitorBatteryState:(BOOL)state3;
-(void)_idleTimerStateBatteryStatusDidChange:(id)_idleTimerStateBatteryStatus;
-(int)_idleTimerStateForBattery;
-(void)_idleTimerStateEnableBatteryMonitoring:(BOOL)monitoring;
-(void)_setIdleTimerState:(int)state;
-(id)idleTimerStateDescription;
-(void)setSuppressNetworkActivity:(BOOL)activity;
-(void)setLoading:(BOOL)loading forType:(int)type;
-(void)_updateLoadingCounterForType:(int)type counterDelta:(int)delta;
-(BOOL)isLoading;
-(BOOL)navigationStartFromURLMustDelayStart;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(void)prepareForDefaultImageSnapshotForScreen:(id)screen;
-(id)nameOfDefaultImageToUpdateAtSuspension;
-(id)mainMapView;
-(void)presentMapsDebugController;
-(void)statusBarTapped;
-(void)dealloc;
-(void)applicationWillTerminate:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)_moveBackToNavigationIfNeeded;
-(void)applicationDidEnterBackground:(id)application;
-(void)sendDidEnterBackgroundNotification;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)_resumeIfNeeded;
-(void)_suspendIfNeeded;
-(void)_updateLoadingIndicator;
-(void)_relaunchIntoNavigationIfNecessary;
-(void)starkDisplayControllerDidInvalidateNavigationVisibility:(id)starkDisplayController;
-(void)_userDefaultsDidChange:(id)_userDefaults;
-(void)_loadMapsForApplication:(id)application;
-(void)applicationDidFinishLaunching:(id)application;
-(BOOL)_applicationShouldUseScreenJail:(id)_application;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)jumpToCupertino;
-(void)jumpToCoords:(XXStruct_qJTILA)coords pitch:(double)pitch yaw:(double)yaw;
-(void)jumpToBayArea;
-(BOOL)runPanZoomTest:(id)test options:(id)options;
-(void)panLoadFinished;
-(BOOL)runSwitchTest:(id)test options:(id)options;
-(BOOL)runVKTest:(id)test options:(id)options;
-(BOOL)runPounceToNavTest:(id)navTest options:(id)options;
-(void)setupForVKTest:(id)vktest options:(id)options;
-(void)startTimingFps:(id)fps;
-(void)finishedFps:(id)fps;
-(void)checkFullyDrawn;
-(void)startPlaceViewControllerPresentationTest:(id)test;
-(void)_placeViewControllerAppeared:(id)appeared;
-(void)startKeyboardBringupTest:(id)test;
-(void)_keyboardDidShow:(id)_keyboard;
-(BOOL)runMapsTest:(id)test options:(id)options;
-(BOOL)runCirclePanTest:(id)test options:(id)options;
-(void)circlePanLoadFinished;
-(void)animateCircle:(int)circle completion:(id)completion;
-(void)didFinishJumping:(id)jumping;
-(void)didFinishDrawingTiles:(id)tiles;
-(BOOL)application:(id)application runTest:(id)test options:(id)options;
-(void)doPostLaunchTestSetup;
-(void)setupFullyDrawnNotification:(SEL)notification;
-(void)interruptApplicationWithKind:(int)kind userInfo:(id)info completionHandler:(id)handler;
@end
