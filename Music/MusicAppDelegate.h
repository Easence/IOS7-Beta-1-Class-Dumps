/* MusicAppDelegate.h Was Dumped By @greensnow_tweak on Sunday, 16 June 2013 at 02:49:00 PM AEST On IOS 7 Beta 1 Firmware. */
/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: (null)
 */

#import "MSCarDisplayServiceProvider.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "MusicTabBarControllerDelegate.h"
#import "RUCreateStationViewControllerDelegate.h"
#import "UINavigationControllerDelegate.h"

@class MusicTabBarController, MusicRadioViewController, MusicPlayerServerDelegate, NSDate, MSRootController, UINavigationController, UIWindow, MusicNowPlayingObserver;

__attribute__((visibility("hidden")))
@interface MusicAppDelegate : XXUnknownSuperclass <MusicTabBarControllerDelegate, RUCreateStationViewControllerDelegate, UINavigationControllerDelegate, MSCarDisplayServiceProvider> {
	unsigned _backgroundTask;
	NSDate* _lastArchivedPlaybackQueueDate;
	MusicPlayerServerDelegate* _musicPlayerServerDelegate;
	MusicNowPlayingObserver* _nowPlayingObserver;
	MusicRadioViewController* _radioViewController;
	MSRootController* _carDisplayController;
	UINavigationController* _radioNavigationController;
	MusicTabBarController* _tabBarController;
	UIWindow* _window;
}
@property(retain, nonatomic) UIWindow* window;
@property(readonly, assign, nonatomic) MusicTabBarController* tabBarController;
@property(readonly, assign, nonatomic) UINavigationController* radioNavigationController;
+(id)_archivedPlaybackQueuePath;
-(void).cxx_destruct;
-(id)_viewControllerIdentifierForNavigationControllerIdentifier:(id)navigationControllerIdentifier;
-(id)_tabBarCustomizableViewControllerIdentifiers;
-(id)_storeClientController;
-(id)_carDisplayTabs;
-(void)_setIAmTheIPod;
-(void)_restorePlaybackQueue;
-(void)_reloadTabsAnimated:(BOOL)animated;
-(void)_postTabsDidChangeNotification;
-(id)_makeTabIdentifiersList;
-(id)_orderedTabBarViewControllerIdentifiers;
-(id)_navigationControllerIdentifierForViewControllerIdentifier:(id)viewControllerIdentifier;
-(void)_migrateTabBarOrderingIfNeeded;
-(void)_endDiscoveringMediaLibrariesIfNecessary;
-(id)_defaultOrderedTabBarViewControllerIdentifiers;
-(void)_archivePlaybackQueue;
-(BOOL)_musicApplication:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)_musicApplication:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)_screenDidConnectOrDisconnectNotification:(id)_screen;
-(void)_mediaLibraryDidChangeNotification:(id)_mediaLibrary;
-(void)_itemWillChangeNotification:(id)_item;
-(void)_itemDidChangeNotification:(id)_item;
-(void)_isRadioEnabledDidChangeNotification:(id)_isRadioEnabled;
-(void)_availableMediaLibrariesDidChangeNotification:(id)_availableMediaLibraries;
-(void)scrollStationToVisible:(id)visible;
-(void)presentAddStation;
-(BOOL)makeRadioVisible;
-(void)exitAdPlayback;
-(void)enterAdPlayback;
-(void)completeAdditionOfStation:(id)station withPrefixItem:(id)prefixItem keepPlayingCurrentItemIfPossible:(BOOL)possible animated:(BOOL)animated animationCompletionHandler:(id)handler;
-(void)addStationWithDictionary:(id)dictionary completionHandler:(id)handler;
-(void)changeShuffleType:(unsigned)type;
-(void)changeRepeatType:(unsigned)type;
-(void)reloadPlayer:(id)player radioStation:(id)station options:(id)options;
-(void)reloadPlayer:(id)player geniusMixPlaylist:(id)playlist options:(id)options;
-(void)reloadPlayer:(id)player mediaQuery:(id)query options:(id)options;
-(void)createStationViewControllerDidFinish:(id)createStationViewController;
-(void)createStationViewController:(id)controller didSelectStation:(id)station;
-(void)MPH_tabBarController:(id)controller didSelectViewController:(id)controller2;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(void)applicationWillResignActive:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(void)applicationDidFinishLaunching:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)dealloc;
@end
